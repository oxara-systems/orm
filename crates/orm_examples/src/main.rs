use orm::{Db, Model};

pub struct Item<T> {
    pub id: T,
    pub name: String,
}

#[derive(Debug, Model)]
#[orm(fn delete_adults() { "WHERE age >= 18" })]
#[orm(fn delete_adults2() { raw! { "DELETE FROM users WHERE age >= 18" } })]
#[orm(fn get_name(id: i32) -> optional! { name: String } { "SELECT name from users WHERE name = $1" })]
#[orm(fn get_by_name(name: &str) { "WHERE name = $1" })]
#[orm(fn list_adults() { "WHERE age >= 18" })]
#[orm(fn list_ages() -> required! { age: i32 } { "SELECT age from users" })]
#[orm(fn list_items() -> Item::<i32> { "SELECT id, name from users" })]
#[orm(fn update_adult_ages() { "SET age = age + 1 WHERE age >= 18" })]
pub struct User {
    pub id: i32,
    pub age: i32,
    pub name: String,
}

#[tokio::main]
async fn main() -> sqlx::Result<()> {
    let db = Db::<sqlx::Error>::connect(&std::env::var("DATABASE_URL").unwrap()).await?;

    let mut age = 18;

    db.write(async move |tx| {
        age += 1;
        let user = User {
            id: 1,
            age,
            name: "Test".into(),
        }
        .insert(tx)
        .await?;

        println!("{user:?}");

        // the UserListAges struct is generated by the macro
        for UserListAges { age } in User::list_ages(tx).await? {
            println!("{age}");
        }

        Ok(())
    })
    .await
    .unwrap();

    Ok(())
}
